//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.12

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub created_at: DateTimeWithTimeZone,
    #[sea_orm(unique)]
    pub username: String,
    #[sea_orm(unique)]
    pub email: String,
    pub email_verified: bool,
    pub password: String,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub reset_password_token: Option<String>,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub confirm_email_token: Option<String>,
    pub profile_picture: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub organization_id: Option<i32>,
    pub access_level_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::access_level::Entity",
        from = "Column::AccessLevelId",
        to = "super::access_level::Column::Id",
        on_update = "Cascade",
        on_delete = "NoAction"
    )]
    AccessLevel,
    #[sea_orm(
        belongs_to = "super::organization::Entity",
        from = "Column::OrganizationId",
        to = "super::organization::Column::Id",
        on_update = "Cascade",
        on_delete = "NoAction"
    )]
    Organization,
    #[sea_orm(has_many = "super::session::Entity")]
    Session,
}

impl Related<super::access_level::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AccessLevel.def()
    }
}

impl Related<super::organization::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organization.def()
    }
}

impl Related<super::session::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Session.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
